"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postcssPluginsOptions = exports.postcssPlugins = exports.createPostcssConfig = void 0;
const path_1 = __importDefault(require("path"));
const app_configs_1 = __importDefault(require("./app-configs"));
/**
 * Функция для создания конфигурационного файла postcss
 * @param {String[]} plugins список плагинов
 * @param {Object} options коллекция конфигураций плагинов, где ключ - название плагина, а значение - аргумент для инициализации
 * @returns {*}
 */
function createPostcssConfig(plugins, options) {
    return plugins.map(pluginName => {
        const plugin = require(pluginName);
        if (options.hasOwnProperty(pluginName)) {
            return plugin(options[pluginName]);
        }
        return plugin();
    });
}
exports.createPostcssConfig = createPostcssConfig;
exports.postcssPlugins = [
    'postcss-omit-import-tilde',
    'postcss-import',
    'postcss-url',
    'postcss-mixins',
    'postcss-for',
    'postcss-each',
    'postcss-custom-media',
    app_configs_1.default.keepCssVars === false && 'postcss-custom-properties',
    'postcss-strip-units',
    'postcss-calc',
    'postcss-color-function',
    'postcss-color-mod-function',
    'postcss-nested',
    'autoprefixer',
    'postcss-inherit',
].filter(Boolean);
exports.postcssPluginsOptions = Object.assign({ 'postcss-import': {
        path: ['./src'],
        plugins: [require('postcss-discard-comments')()],
    }, 'postcss-url': {
        url: 'rebase',
    }, 'postcss-custom-media': {
        importFrom: path_1.default.resolve(__dirname, 'mq.js')
    }, 'postcss-color-mod-function': {
        unresolved: 'warn',
    } }, (app_configs_1.default.keepCssVars === false && {
    'postcss-custom-properties': {
        preserve: false,
        importFrom: app_configs_1.default.componentsTheme,
    }
}));

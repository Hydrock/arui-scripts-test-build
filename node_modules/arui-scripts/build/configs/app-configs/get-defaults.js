"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaults = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
function getDefaults() {
    const CWD = process.cwd();
    const appPackage = JSON.parse(fs_1.default.readFileSync(path_1.default.join(CWD, 'package.json'), 'utf8'));
    if (appPackage['arui-scripts']) {
        throw Error('arui-scripts in package.json is not supported. Use aruiScripts instead.');
    }
    const absoluteSrcPath = path_1.default.resolve(CWD, 'src');
    const absoluteNodeModulesPath = path_1.default.resolve(CWD, 'node_modules');
    const projectTsConfigPath = path_1.default.join(CWD, 'tsconfig.json');
    const yarnLockFilePath = path_1.default.join(CWD, 'yarn.lock');
    const overridesPath = path_1.default.join(CWD, 'arui-scripts.overrides.js');
    const nginxConfFilePath = path_1.default.join(CWD, 'nginx.conf');
    const dockerfileFilePath = path_1.default.join(CWD, 'Dockerfile');
    return {
        appPackage,
        name: appPackage.name,
        version: appPackage.version,
        dockerRegistry: '',
        baseDockerImage: 'alfabankui/arui-scripts:latest',
        // general paths
        cwd: CWD,
        appSrc: absoluteSrcPath,
        appNodeModules: absoluteNodeModulesPath,
        buildPath: '.build',
        assetsPath: 'assets',
        additionalBuildPath: ['config'],
        nginxRootPath: '/src',
        runFromNonRootUser: false,
        archiveName: 'build.tar',
        // server compilation configs
        serverEntry: path_1.default.resolve(absoluteSrcPath, 'server/index'),
        serverOutput: 'server.js',
        // client compilation configs
        clientPolyfillsEntry: null,
        clientEntry: path_1.default.resolve(absoluteSrcPath, 'index'),
        keepPropTypes: false,
        // compilation configs locations
        tsconfig: fs_1.default.existsSync(projectTsConfigPath) ? projectTsConfigPath : null,
        localNginxConf: fs_1.default.existsSync(nginxConfFilePath) ? nginxConfFilePath : null,
        localDockerfile: fs_1.default.existsSync(dockerfileFilePath) ? dockerfileFilePath : null,
        useTscLoader: false,
        useServerHMR: false,
        useYarn: fs_1.default.existsSync(yarnLockFilePath),
        clientServerPort: 8080,
        serverPort: 3000,
        debug: false,
        overridesPath: [overridesPath],
        componentsTheme: undefined,
        keepCssVars: false,
        // Эти пути зависят от других настроек, которые могут быть переопределены пользователем
        publicPath: '',
        serverOutputPath: '',
        clientOutputPath: '',
    };
}
exports.getDefaults = getDefaults;

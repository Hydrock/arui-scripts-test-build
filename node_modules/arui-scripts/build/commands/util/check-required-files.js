"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const app_configs_1 = __importDefault(require("../../configs/app-configs"));
const extensions = ['ts', 'tsx', 'js', 'jsx'];
function entryPointToArray(entryPoint) {
    if (typeof entryPoint === 'string') {
        return [entryPoint];
    }
    if (Array.isArray(entryPoint)) {
        return entryPoint;
    }
    return Object.keys(entryPoint).reduce((result, name) => {
        const entry = entryPointToArray(entryPoint[name]);
        return [...result, ...entry];
    }, []);
}
const files = [
    ...entryPointToArray(app_configs_1.default.serverEntry),
    ...entryPointToArray(app_configs_1.default.clientEntry),
    ...(Array.isArray(app_configs_1.default.clientPolyfillsEntry) ? app_configs_1.default.clientPolyfillsEntry : [app_configs_1.default.clientPolyfillsEntry]),
];
function checkFileWithExtensions(filePath, extensions) {
    if (extensions.some(ext => filePath.endsWith(`.${ext}`))) {
        try {
            fs_1.default.accessSync(filePath);
            return true;
        }
        catch (err) { }
    }
    for (let i = 0; i < extensions.length; i++) {
        try {
            fs_1.default.accessSync(`${filePath}.${extensions[i]}`);
            return true;
        }
        catch (err) { }
    }
    return false;
}
function checkRequiredFiles() {
    const unavailableFilePaths = files
        .filter(Boolean)
        .reduce((result, filePath) => {
        if (filePath && !checkFileWithExtensions(filePath, extensions)) {
            result.push(filePath);
        }
        return result;
    }, []);
    if (unavailableFilePaths.length !== 0) {
        console.log(chalk_1.default.red('Could not find required files.'));
        const extensionsString = extensions.join(',');
        unavailableFilePaths.forEach(filePath => {
            const dirName = path_1.default.dirname(filePath);
            const fileName = path_1.default.basename(filePath);
            console.log(chalk_1.default.red('  Name: ') + chalk_1.default.cyan(`${fileName}.{${extensionsString}}`));
            console.log(chalk_1.default.red('  Searched in: ') + chalk_1.default.cyan(dirName));
        });
        return false;
    }
    return true;
}
exports.default = checkRequiredFiles;

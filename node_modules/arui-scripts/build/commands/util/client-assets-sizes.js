"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printAssetsSizes = exports.calculateAssetsSizes = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const gzip_size_1 = require("gzip-size");
const filesize_1 = __importDefault(require("filesize"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
const chalk_1 = __importDefault(require("chalk"));
let brotliSize = () => NaN;
try {
    brotliSize = require('brotli-size').sync;
}
catch (error) {
}
function canReadAsset(asset) {
    return (/\.(js|css)$/.test(asset) &&
        !/service-worker\.js/.test(asset) &&
        !/precache-manifest\.[0-9a-f]+\.js/.test(asset));
}
function removeFileNameHash(fileName) {
    return fileName
        .replace(/\\/g, '/')
        .replace(/\/?(.*)(\.[0-9a-f]+)(\.chunk)?(\.js|\.css)/, (match, p1, p2, p3, p4) => p1 + p4);
}
function calculateAssetsSizes(webpackStats, rootDir = '') {
    const assetsStats = (webpackStats
        .toJson({ all: false, assets: true })
        .assets || []);
    const assets = assetsStats
        .filter(asset => canReadAsset(asset.name))
        .map(asset => {
        const fileContents = fs_1.default.readFileSync(path_1.default.join(rootDir, asset.name));
        const size = gzip_size_1.sync(fileContents);
        const brSize = brotliSize(fileContents);
        const filename = path_1.default.basename(asset.name);
        return {
            name: removeFileNameHash(filename),
            fullName: filename,
            gzipSize: size,
            brotliSize: brSize,
            size: asset.size,
            sizeLabel: filesize_1.default(asset.size),
            gzipLabel: filesize_1.default(size),
            brotliLabel: brSize ? filesize_1.default(brSize) : '-'
        };
    });
    const totalSizes = (assets || []).reduce((file, total) => {
        return {
            size: total.size + file.size,
            gzipSize: total.gzipSize + file.gzipSize,
            brotliSize: total.brotliSize + file.brotliSize
        };
    }, { size: 0, gzipSize: 0, brotliSize: 0 });
    totalSizes.sizeLabel = filesize_1.default(totalSizes.size || 0);
    totalSizes.gzipLabel = filesize_1.default(totalSizes.gzipSize || 0);
    totalSizes.brotliLabel = totalSizes.brotliSize ? filesize_1.default(totalSizes.brotliSize) : '-';
    return {
        totalSizes: totalSizes,
        assets
    };
}
exports.calculateAssetsSizes = calculateAssetsSizes;
function printAssetsSizes(sizes) {
    const longestSizeLabelLength = Math.max.apply(null, sizes.assets.map(a => strip_ansi_1.default(a.gzipLabel).length + strip_ansi_1.default(a.sizeLabel).length + 8));
    console.log(chalk_1.default.blueBright('Assets sizes:'));
    sizes.assets.forEach(asset => {
        let sizeLabel = `${asset.sizeLabel} (${asset.gzipLabel} gzip, ${asset.brotliLabel} br)`;
        const sizeLength = strip_ansi_1.default(sizeLabel).length;
        if (sizeLength < longestSizeLabelLength) {
            const rightPadding = ' '.repeat(longestSizeLabelLength - sizeLength);
            sizeLabel += rightPadding;
        }
        console.log('  ' +
            sizeLabel +
            '  ' +
            chalk_1.default.cyan(asset.name));
    });
    console.log(chalk_1.default.blueBright('\nTotal size:\n') +
        `  ${sizes.totalSizes.sizeLabel} (${sizes.totalSizes.gzipLabel} gzip, ${sizes.totalSizes.brotliLabel} br)\n`);
}
exports.printAssetsSizes = printAssetsSizes;

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const shelljs_1 = __importDefault(require("shelljs"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const app_configs_1 = __importDefault(require("../../configs/app-configs"));
const dockerfile_template_1 = __importDefault(require("../../templates/dockerfile.template"));
const nginx_conf_template_1 = __importDefault(require("../../templates/nginx.conf.template"));
const start_template_1 = __importDefault(require("../../templates/start.template"));
const exec_1 = __importDefault(require("../util/exec"));
let imageVersion = app_configs_1.default.version;
let imageName = app_configs_1.default.name;
let dockerRegistry = app_configs_1.default.dockerRegistry;
const commandLineArguments = process.argv.slice(3);
commandLineArguments.forEach(arg => {
    let [argName, argValue] = arg.split('=');
    argName = argName.toLowerCase().trim();
    argValue = argValue ? argValue.trim() : '';
    switch (argName) {
        case 'version':
            imageVersion = argValue;
            break;
        case 'name':
            imageName = argValue;
            break;
        case 'registry':
            dockerRegistry = argValue;
            break;
        default:
            console.warn(`Unknown argument ${argName}`);
    }
});
const tempDirName = '.docker-build';
const pathToTempDir = path_1.default.join(app_configs_1.default.cwd, tempDirName);
const imageFullName = `${dockerRegistry ? `${dockerRegistry}/` : ''}${imageName}:${imageVersion}`;
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log(`Build docker image ${imageFullName}`);
        console.time('Total time');
        console.time('Setting up time');
        // create tmp directory for docker related files
        // We need to copy it because we will remove this directory during build process
        yield fs_extra_1.default.emptyDir(pathToTempDir);
        const nginxConf = app_configs_1.default.localNginxConf
            ? yield fs_extra_1.default.readFile(app_configs_1.default.localNginxConf, 'utf8')
            : nginx_conf_template_1.default;
        const dockerfile = app_configs_1.default.localDockerfile
            ? yield fs_extra_1.default.readFile(app_configs_1.default.localDockerfile, 'utf8')
            : dockerfile_template_1.default;
        yield Promise.all([
            fs_extra_1.default.writeFile(path_1.default.join(pathToTempDir, 'Dockerfile'), dockerfile, 'utf8'),
            fs_extra_1.default.writeFile(path_1.default.join(pathToTempDir, 'nginx.conf'), nginxConf, 'utf8'),
            fs_extra_1.default.writeFile(path_1.default.join(pathToTempDir, 'start.sh'), start_template_1.default, { encoding: 'utf8', mode: 0o555 }),
            fs_extra_1.default.remove(app_configs_1.default.buildPath),
        ]);
        console.timeEnd('Setting up time');
        console.time('Build application time');
        // run build script
        yield exec_1.default('npm run build');
        console.timeEnd('Build application time');
        console.time('Remove dev dependencies time');
        // if yarn is available prune dev dependencies with yarn, otherwise use npm
        if (app_configs_1.default.useYarn && shelljs_1.default.which('yarn')) {
            yield exec_1.default('yarn install --production --ignore-optional --frozen-lockfile --ignore-scripts --prefer-offline');
        }
        else {
            yield exec_1.default('npm prune --production');
        }
        console.timeEnd('Remove dev dependencies time');
        console.time('Build docker image time');
        yield exec_1.default(`docker build -f "./${tempDirName}/Dockerfile" \\
 --build-arg START_SH_LOCATION="./${tempDirName}/start.sh" \\
 --build-arg NGINX_CONF_LOCATION="./${tempDirName}/nginx.conf" -t ${imageFullName} .`);
        console.timeEnd('Build docker image time');
        console.time('Cleanup time');
        // remove temp directory
        yield fs_extra_1.default.remove(pathToTempDir);
        // guard against pushing the image during tests
        if (!app_configs_1.default.debug) {
            yield exec_1.default(`docker push ${imageFullName}`);
        }
        console.timeEnd('Cleanup time');
        console.timeEnd('Total time');
    }
    catch (err) {
        yield fs_extra_1.default.remove(pathToTempDir);
        console.error('Error during docker-build.');
        if (app_configs_1.default.debug) {
            console.error(err);
        }
        process.exit(1);
    }
}))();

"use strict";
/* eslint import/no-extraneous-dependencies: 0 */
/* eslint no-console: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const webpack_1 = __importDefault(require("webpack"));
const format_webpack_messages_1 = __importDefault(require("../util/format-webpack-messages"));
function build(config, previousFileSizes) {
    let compiler = webpack_1.default(config);
    return new Promise((resolve, reject) => {
        compiler.run((err, stats) => {
            if (err) {
                return reject(err);
            }
            const messages = format_webpack_messages_1.default(stats === null || stats === void 0 ? void 0 : stats.toJson({}));
            if (messages.errors.length) {
                // Only keep the first error. Others are often indicative
                // of the same problem, but confuse the reader with noise.
                if (messages.errors.length > 1) {
                    messages.errors.length = 1;
                }
                return reject(new Error(messages.errors.join('\n\n')));
            }
            if (process.env.CI && (process.env.CI.toLowerCase() !== 'false') &&
                messages.warnings.length) {
                console.log(chalk_1.default.yellow('\nTreating warnings as errors because process.env.CI = true.\n' +
                    'Most CI servers set it automatically.\n'));
                return reject(new Error(messages.warnings.join('\n\n')));
            }
            return resolve({
                stats,
                warnings: messages.warnings,
                previousFileSizes
            });
        });
    });
}
exports.default = build;

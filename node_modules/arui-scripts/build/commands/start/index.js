"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
process.env.BROWSERSLIST_CONFIG = process.env.BROWSERSLIST_CONFIG || require.resolve('../../../.browserslistrc');
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const WebpackDevServerUtils_1 = require("react-dev-utils/WebpackDevServerUtils");
const run = require('parallel-webpack').run;
const check_required_files_1 = __importDefault(require("../util/check-required-files"));
const app_configs_1 = __importDefault(require("../../configs/app-configs"));
const webpack_client_dev_1 = __importDefault(require("../../configs/webpack.client.dev"));
const webpack_server_dev_1 = __importDefault(require("../../configs/webpack.server.dev"));
const stats_options_1 = __importDefault(require("../../configs/stats-options"));
const dev_server_1 = __importDefault(require("../../configs/dev-server"));
const clientCompiler = run(webpack_client_dev_1.default, {
    watch: false,
    maxRetries: 2,
    stats: false,
    maxConcurrentWorkers: 4 // use 4 workers
});
const serverCompiler = run(webpack_server_dev_1.default, {
    watch: false,
    maxRetries: 2,
    stats: false,
    maxConcurrentWorkers: 4 // use 4 workers
});
// @ts-ignore
const clientDevServer = new webpack_dev_server_1.default(dev_server_1.default, clientCompiler);
serverCompiler.hooks.compile.tap('server', () => console.log('Compiling server...'));
serverCompiler.hooks.invalid.tap('server', () => console.log('Compiling server...'));
serverCompiler.hooks.done.tap('server', (stats) => printCompilerOutput('Server', stats));
clientCompiler.hooks.invalid.tap('client', () => console.log('Compiling client...'));
clientCompiler.hooks.done.tap('client', (stats) => printCompilerOutput('Client', stats));
const DEFAULT_PORT = dev_server_1.default.port;
const HOST = '0.0.0.0';
if (!check_required_files_1.default()) {
    process.exit(1);
}
if (fs_extra_1.default.pathExistsSync(app_configs_1.default.serverOutputPath)) {
    fs_extra_1.default.removeSync(app_configs_1.default.serverOutputPath);
}
// We attempt to use the default port but if it is busy, we offer the user to
// run on a different port. `detect()` Promise resolves to the next free port.
WebpackDevServerUtils_1.choosePort(HOST, +(DEFAULT_PORT || 0))
    .then((port) => {
    if (!port) {
        // We have not found a port.
        return;
    }
    serverCompiler.watch({ aggregateTimeout: 100 }, () => { });
    clientDevServer.startCallback(() => {
        console.log(`Client dev server running at http://${HOST}:${port}...`);
    });
})
    .catch((err) => {
    if (err && err.message) {
        console.log(err.message);
    }
    process.exit(1);
});
function printCompilerOutput(compilerName, stats) {
    const output = stats.toString(stats_options_1.default)
        .split('\n')
        .map((line) => `${chalk_1.default.cyan(`[${compilerName}]`)} ${line}`)
        .join('\n');
    console.log(output);
}

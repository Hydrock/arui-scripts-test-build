"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const shelljs_1 = __importDefault(require("shelljs"));
const tar_1 = __importDefault(require("tar"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const app_configs_1 = __importDefault(require("../../configs/app-configs"));
const exec_1 = __importDefault(require("../util/exec"));
const nginx_conf_template_1 = __importDefault(require("../../templates/nginx.conf.template"));
const start_template_1 = __importDefault(require("../../templates/start.template"));
const tempDirName = '.archive-build';
const nginxConfFileName = 'nginx.conf';
const startScriptFileName = 'start.sh';
const nodeModulesDirName = 'node_modules';
const packageJsonFileName = 'package.json';
const pathToTempDir = path_1.default.join(app_configs_1.default.cwd, tempDirName);
const nginxConfPath = path_1.default.join(pathToTempDir, nginxConfFileName);
const startScriptPath = path_1.default.join(pathToTempDir, startScriptFileName);
const nodeModulesPath = path_1.default.join(app_configs_1.default.cwd, nodeModulesDirName);
const packageJsonPath = path_1.default.join(app_configs_1.default.cwd, packageJsonFileName);
(() => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.time('Total time');
        console.time('Setting up time');
        yield fs_extra_1.default.emptyDir(pathToTempDir);
        const nginxConf = app_configs_1.default.localNginxConf
            ? yield fs_extra_1.default.readFile(app_configs_1.default.localNginxConf, 'utf8')
            : nginx_conf_template_1.default;
        yield Promise.all([
            fs_extra_1.default.writeFile(nginxConfPath, nginxConf, 'utf8'),
            fs_extra_1.default.writeFile(startScriptPath, start_template_1.default, { encoding: 'utf8', mode: 0o555 }),
            fs_extra_1.default.remove(app_configs_1.default.buildPath),
        ]);
        console.timeEnd('Setting up time');
        console.time('Build application time');
        // run build script
        yield exec_1.default('npm run build');
        console.timeEnd('Build application time');
        console.time('Remove build dependencies time');
        // if yarn is available prune dev dependencies with yarn, otherwise use npm
        if (app_configs_1.default.useYarn && shelljs_1.default.which('yarn')) {
            yield exec_1.default('yarn install --production --ignore-optional --frozen-lockfile --ignore-scripts --prefer-offline');
        }
        else {
            yield exec_1.default('npm prune --production');
        }
        console.timeEnd('Remove build dependencies time');
        console.time('Archive build time');
        yield Promise.all([
            fs_extra_1.default.copy(app_configs_1.default.buildPath, path_1.default.join(pathToTempDir, app_configs_1.default.buildPath)),
            fs_extra_1.default.copy(nodeModulesPath, path_1.default.join(pathToTempDir, nodeModulesDirName)),
            fs_extra_1.default.copy(packageJsonPath, path_1.default.join(pathToTempDir, packageJsonFileName)),
            ...app_configs_1.default.additionalBuildPath.map(additionalPath => (fs_extra_1.default.copy(path_1.default.join(app_configs_1.default.cwd, additionalPath), path_1.default.join(pathToTempDir, additionalPath))))
        ]);
        yield tar_1.default.c({
            file: app_configs_1.default.archiveName,
            cwd: pathToTempDir
        }, fs_extra_1.default.readdirSync(pathToTempDir));
        console.timeEnd('Archive build time');
        console.time('Cleanup time');
        // remove temp directory
        yield fs_extra_1.default.remove(pathToTempDir);
        console.timeEnd('Cleanup time');
        console.timeEnd('Total time');
    }
    catch (err) {
        console.error('Error during archive-build.');
        if (app_configs_1.default.debug) {
            console.error(err);
        }
        process.exit(1);
    }
}))();
